// Code generated by protoc-gen-go. DO NOT EDIT.
// source: qiniu.proto

/*
Package qiniu is a generated protocol buffer package.

It is generated from these files:
	qiniu.proto

It has these top-level messages:
	UpTokenRequest
	UpTokenReply
*/
package qiniu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UpTokenRequest struct {
	Userid string `protobuf:"bytes,1,opt,name=userid" json:"userid,omitempty"`
}

func (m *UpTokenRequest) Reset()                    { *m = UpTokenRequest{} }
func (m *UpTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*UpTokenRequest) ProtoMessage()               {}
func (*UpTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UpTokenRequest) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type UpTokenReply struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *UpTokenReply) Reset()                    { *m = UpTokenReply{} }
func (m *UpTokenReply) String() string            { return proto.CompactTextString(m) }
func (*UpTokenReply) ProtoMessage()               {}
func (*UpTokenReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UpTokenReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*UpTokenRequest)(nil), "upTokenRequest")
	proto.RegisterType((*UpTokenReply)(nil), "upTokenReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Qiniu service

type QiniuClient interface {
	// 获取上传凭证
	GetToken(ctx context.Context, in *UpTokenRequest, opts ...grpc.CallOption) (*UpTokenReply, error)
}

type qiniuClient struct {
	cc *grpc.ClientConn
}

func NewQiniuClient(cc *grpc.ClientConn) QiniuClient {
	return &qiniuClient{cc}
}

func (c *qiniuClient) GetToken(ctx context.Context, in *UpTokenRequest, opts ...grpc.CallOption) (*UpTokenReply, error) {
	out := new(UpTokenReply)
	err := grpc.Invoke(ctx, "/Qiniu/GetToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Qiniu service

type QiniuServer interface {
	// 获取上传凭证
	GetToken(context.Context, *UpTokenRequest) (*UpTokenReply, error)
}

func RegisterQiniuServer(s *grpc.Server, srv QiniuServer) {
	s.RegisterService(&_Qiniu_serviceDesc, srv)
}

func _Qiniu_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QiniuServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Qiniu/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QiniuServer).GetToken(ctx, req.(*UpTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Qiniu_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Qiniu",
	HandlerType: (*QiniuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _Qiniu_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qiniu.proto",
}

func init() { proto.RegisterFile("qiniu.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xcc, 0xcc, 0xcb,
	0x2c, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xd2, 0xe0, 0xe2, 0x2b, 0x2d, 0x08, 0xc9, 0xcf,
	0x4e, 0xcd, 0x0b, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe3, 0x62, 0x2b, 0x2d, 0x4e,
	0x2d, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf2, 0x94, 0x54, 0xb8, 0x78,
	0xe0, 0x2a, 0x0b, 0x72, 0x2a, 0x85, 0x44, 0xb8, 0x58, 0x4b, 0x40, 0x3c, 0xa8, 0x32, 0x08, 0xc7,
	0xc8, 0x94, 0x8b, 0x35, 0x10, 0x64, 0xbc, 0x90, 0x0e, 0x17, 0x87, 0x7b, 0x6a, 0x09, 0x58, 0xbd,
	0x10, 0xbf, 0x1e, 0xaa, 0x1d, 0x52, 0xbc, 0x7a, 0xc8, 0x46, 0x29, 0x31, 0x24, 0xb1, 0x81, 0x5d,
	0x63, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x55, 0x4e, 0xfa, 0x9c, 0x00, 0x00, 0x00,
}
