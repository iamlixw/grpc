// Code generated by protoc-gen-go. DO NOT EDIT.
// source: other.proto

/*
Package other is a generated protocol buffer package.

It is generated from these files:
	other.proto

It has these top-level messages:
	SendRequest
	SendReply
	CheckRequest
	CheckReply
*/
package other

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SendRequest struct {
	Mobile string `protobuf:"bytes,1,opt,name=mobile" json:"mobile,omitempty"`
}

func (m *SendRequest) Reset()                    { *m = SendRequest{} }
func (m *SendRequest) String() string            { return proto.CompactTextString(m) }
func (*SendRequest) ProtoMessage()               {}
func (*SendRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SendRequest) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

type SendReply struct {
	Sended string `protobuf:"bytes,1,opt,name=sended" json:"sended,omitempty"`
}

func (m *SendReply) Reset()                    { *m = SendReply{} }
func (m *SendReply) String() string            { return proto.CompactTextString(m) }
func (*SendReply) ProtoMessage()               {}
func (*SendReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SendReply) GetSended() string {
	if m != nil {
		return m.Sended
	}
	return ""
}

type CheckRequest struct {
	Mobile string `protobuf:"bytes,1,opt,name=mobile" json:"mobile,omitempty"`
	Code   string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
}

func (m *CheckRequest) Reset()                    { *m = CheckRequest{} }
func (m *CheckRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckRequest) ProtoMessage()               {}
func (*CheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CheckRequest) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *CheckRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type CheckReply struct {
	Checked string `protobuf:"bytes,1,opt,name=checked" json:"checked,omitempty"`
}

func (m *CheckReply) Reset()                    { *m = CheckReply{} }
func (m *CheckReply) String() string            { return proto.CompactTextString(m) }
func (*CheckReply) ProtoMessage()               {}
func (*CheckReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CheckReply) GetChecked() string {
	if m != nil {
		return m.Checked
	}
	return ""
}

func init() {
	proto.RegisterType((*SendRequest)(nil), "sendRequest")
	proto.RegisterType((*SendReply)(nil), "sendReply")
	proto.RegisterType((*CheckRequest)(nil), "checkRequest")
	proto.RegisterType((*CheckReply)(nil), "checkReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Other service

type OtherClient interface {
	// 发送短信验证码
	SendSms(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendReply, error)
	// 校验短信验证码
	CheckCode(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckReply, error)
}

type otherClient struct {
	cc *grpc.ClientConn
}

func NewOtherClient(cc *grpc.ClientConn) OtherClient {
	return &otherClient{cc}
}

func (c *otherClient) SendSms(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendReply, error) {
	out := new(SendReply)
	err := grpc.Invoke(ctx, "/Other/SendSms", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otherClient) CheckCode(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := grpc.Invoke(ctx, "/Other/CheckCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Other service

type OtherServer interface {
	// 发送短信验证码
	SendSms(context.Context, *SendRequest) (*SendReply, error)
	// 校验短信验证码
	CheckCode(context.Context, *CheckRequest) (*CheckReply, error)
}

func RegisterOtherServer(s *grpc.Server, srv OtherServer) {
	s.RegisterService(&_Other_serviceDesc, srv)
}

func _Other_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtherServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Other/SendSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtherServer).SendSms(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Other_CheckCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtherServer).CheckCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Other/CheckCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtherServer).CheckCode(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Other_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Other",
	HandlerType: (*OtherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSms",
			Handler:    _Other_SendSms_Handler,
		},
		{
			MethodName: "CheckCode",
			Handler:    _Other_CheckCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "other.proto",
}

func init() { proto.RegisterFile("other.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x2f, 0xc9, 0x48,
	0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x52, 0xe5, 0xe2, 0x2e, 0x4e, 0xcd, 0x4b, 0x09,
	0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe3, 0x62, 0xcb, 0xcd, 0x4f, 0xca, 0xcc, 0x49,
	0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf2, 0x94, 0x94, 0xb9, 0x38, 0x21, 0xca, 0x0a,
	0x72, 0x2a, 0x41, 0x8a, 0x40, 0x9c, 0xd4, 0x14, 0x98, 0x22, 0x08, 0x4f, 0xc9, 0x8a, 0x8b, 0x27,
	0x39, 0x23, 0x35, 0x39, 0x9b, 0x80, 0x61, 0x42, 0x42, 0x5c, 0x2c, 0xc9, 0xf9, 0x29, 0xa9, 0x12,
	0x4c, 0x60, 0x51, 0x30, 0x5b, 0x49, 0x8d, 0x8b, 0x0b, 0xaa, 0x17, 0x64, 0x83, 0x04, 0x17, 0x3b,
	0x98, 0x07, 0xb7, 0x02, 0xc6, 0x35, 0x8a, 0xe4, 0x62, 0xf5, 0x07, 0x39, 0x5f, 0x48, 0x95, 0x8b,
	0x3d, 0x38, 0x35, 0x2f, 0x25, 0x38, 0xb7, 0x58, 0x88, 0x47, 0x0f, 0xc9, 0x0b, 0x52, 0x5c, 0x7a,
	0x70, 0x97, 0x2a, 0x31, 0x08, 0x69, 0x72, 0x71, 0x3a, 0x83, 0xb4, 0x3a, 0xe7, 0xa7, 0xa4, 0x0a,
	0xf1, 0xea, 0x21, 0xbb, 0x4f, 0x8a, 0x5b, 0x0f, 0x61, 0xa5, 0x12, 0x43, 0x12, 0x1b, 0x38, 0x44,
	0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x04, 0xa0, 0x13, 0x20, 0x01, 0x00, 0x00,
}
